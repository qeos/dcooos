# 1 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c"
# 1 "D:\\WORK\\BUILD\\OS\\dcooos\\video//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c"
# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/types.h" 1



typedef unsigned char u1;
typedef unsigned short u2;
typedef unsigned long u4;
typedef unsigned long long u8;
# 2 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c" 2
# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/main.h" 1



# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/types.h" 1
# 5 "D:/WORK/BUILD/OS/dcooos/kernel64/main.h" 2
# 63 "D:/WORK/BUILD/OS/dcooos/kernel64/main.h"
typedef struct{
    u4 bootDrive;
    u4 memorySize;
    u4 VBElfb;
    u4 VBEResX;
    u4 VBEResY;
    u4 VBEBPP;
} __attribute__((packed)) t_parametresHW;

t_parametresHW *parametresHW;
# 3 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c" 2
# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/syscall.h" 1



u8 syscall(void *object, char *func);
u8 syscall(void *object, char *func){
    u8 ret;
    asm volatile("int $0x80":"=a" (ret):"a"(object), "b"(func));
    return ret;
}
# 4 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c" 2
# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/strings.c" 1



void memcpy(u1 *dest, const u1 *src, u8 len)
{
    u1 *tmp = dest;
    const u1 *s = src;

    while(len--)
        *tmp++ = *s++;
}


void memset(u1 *dest, u1 val, u8 len)
{
    u1 *xs = dest;
    while(len--)
        *xs++ = val;
}



u8 strcmp(u1 *str1, u1 *str2)
{
      u8 i = 0;
      u8 failed = 0;
      while(str1[i] != '\0' && str2[i] != '\0')
      {
          if(str1[i] != str2[i])
          {
              failed = 1;
              break;
          }
          i++;
      }

      if( (str1[i] == '\0' && str2[i] != '\0') || (str1[i] != '\0' && str2[i] == '\0') )
          failed = 1;

      return failed;
}


u1 *strcpy(u1 *dest, const u1 *src)
{
    do
    {
      *dest++ = *src++;
    }
    while (*src != 0);
    *dest++ = 0;
}


u1 *strncpy(u1 *dest, const u1 *src, u8 len)
{
    int i=len-1;
    while(i>=0){
        dest[i] = src[i];
        i--;
    }
}


u1 *strcat(u1 *dest, const u1 *src)
{
    while (*dest != 0)
    {
        *dest = *dest++;
    }

    do
    {
        *dest++ = *src++;
    }
    while (*src != 0);
    return dest;
}

u8 strchr(u1 *str, u1 ch)
{
    u8 i=0;
    while(str[i]!=0){
        if(str[i]==ch){
            return i;
        }
        i++;
    }
    return 0;
}

u8 strlen(u1 *src)
{
    u8 i = 0;
    while (*src++)
        i++;
    return i;
}

u8 str2int(u1 *str){
    int i=0;
    u8 j=0, k=1;
    while( ((str[i]>='0') && (str[i]<='9')) ){
        i++;
    }
    i--;
    while( i>=0 ){
        j = j + (str[i] - '0') * k;
        k *= 10;
        i--;
    }
    return j;
}


u8 str2hex(u1 *str){
    int i=0;
    u8 j=0, k=1;
    while( ((str[i]>='0') && (str[i]<='9')) || ((str[i]>='a') && (str[i]<='f')) || ((str[i]>='A') && (str[i]<='F')) ){
        i++;
    }
    i--;
    while( i>=0 ){
        if ((str[i]>='a') && (str[i]<='f')){
            j = j + (str[i] - 'a' + 10) * k;
        }else if ((str[i]>='A') && (str[i]<='F')){
            j = j + (str[i] - 'A' + 10) * k;
        }else if ((str[i]>='0') && (str[i]<='9')){
            j = j + (str[i] - '0') * k;
        }
        k *= 16;
        i--;
    }
    return j;
}
# 5 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c" 2
# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/objects.h" 1



# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/task.h" 1



# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/objects.h" 1
# 5 "D:/WORK/BUILD/OS/dcooos/kernel64/task.h" 2
# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/idt.h" 1



typedef struct registers
{
   u8 ds;

   u8 rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi;
   u8 int_no, err_code;
   u8 rip, cs, eflags, useresp, ss;
} registers_t;




extern u8 clisti;
# 6 "D:/WORK/BUILD/OS/dcooos/kernel64/task.h" 2
# 16 "D:/WORK/BUILD/OS/dcooos/kernel64/task.h"
typedef struct task{
    u8 id;

    u1 state;
    u8 wakeup_time;

    u8 pdir;
    u8 task_pdir;

    u8 timer_tick;
    u8 switch_count;

    char *name;


    u1 task_interrupted;
    registers_t stack;

    struct task *next;

}task_t;

task_t *current_task;
task_t *tasks;

void sleep();
# 5 "D:/WORK/BUILD/OS/dcooos/kernel64/objects.h" 2


typedef struct {
    u4 data1;
    u2 data2;
    u2 data3;
    u2 data4;
    u4 data5;
} GUID;

GUID str2GUID(u1 *guid);



struct property{
    u1 *name;
    u8 type;
    u8 size;
    u8 pointer;
    struct property *prev;
    struct property *next;
};
typedef struct property t_property;

struct method{
    u1 *name;
    u8 pointer;
    struct method *prev;
    struct method *next;
};
typedef struct method t_method;




struct heap{
    u8 pointer;
    u8 size;
    u8 state;
};
typedef struct heap t_heap;


struct object{
    GUID guid;
    u1 *name;
    u8 pdir;
    t_property *property;
    t_method *method;
    t_heap *heap;
    u8 is_class;
    struct object *prev;
    struct object *next;
    struct object *sub;
    struct object *sup;
};
typedef struct object t_object;

struct guid_array{
    GUID guid;
    t_object *object;
    struct guid_array *next;
};
typedef struct guid_array t_guid_array;

t_object *objects_main_tree;
# 100 "D:/WORK/BUILD/OS/dcooos/kernel64/objects.h"
GUID obj_create(u1 *name, GUID classof);
# 6 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c" 2
# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/system_ll/ioport.c" 1
# 1 "D:/WORK/BUILD/OS/dcooos/kernel64/types.h" 1
# 2 "D:/WORK/BUILD/OS/dcooos/kernel64/system_ll/ioport.c" 2

u1 inb(u2 port){
    u1 data;
    asm("inb (%w1)" :"=a" (data):"Nd" (port));
    return data;
}
u2 inw(u2 port){
    unsigned short data;
    asm("inw (%w1)" :"=a" (data):"Nd" (port));
    return data;
}
u4 inl(u2 port){
    unsigned short data;
    asm("inl (%w1)" :"=a" (data):"Nd" (port));
    return data;
}
void outb(u2 port, u1 data){
    asm("outb (%w1)" : : "a" (data), "dN" (port));
}
void outw(u2 port, u2 data){
    asm("outw (%w1)" : : "a" (data), "dN" (port));
}
void outl(u2 port, u4 data){
    asm("outl (%w1)" : : "a" (data), "dN" (port));
}
# 7 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c" 2
# 1 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.h" 1





char font[127*13]=
{

0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,

0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,

0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,

0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,
0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x15, 0x16, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00,
0x00, 0x00, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0A, 0x0A, 0x3F, 0x14, 0x14, 0x14, 0x7E, 0x28, 0x28, 0x00, 0x00,
0x00, 0x00, 0x08, 0x1C, 0x22, 0x20, 0x1C, 0x02, 0x22, 0x1C, 0x08, 0x00, 0x00,
0x00, 0x00, 0x20, 0x51, 0x22, 0x04, 0x08, 0x10, 0x22, 0x45, 0x02, 0x00, 0x00,
0x00, 0x00, 0x18, 0x20, 0x20, 0x10, 0x30, 0x49, 0x4A, 0x44, 0x3B, 0x00, 0x00,
0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04,
0x00, 0x00, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x10,
0x00, 0x00, 0x00, 0x00, 0x36, 0x1C, 0x7F, 0x1C, 0x36, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x08, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x22, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x22, 0x02, 0x02, 0x0C, 0x02, 0x02, 0x22, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x04, 0x0C, 0x0C, 0x14, 0x14, 0x24, 0x3E, 0x04, 0x0E, 0x00, 0x00,
0x00, 0x00, 0x3E, 0x20, 0x20, 0x20, 0x3C, 0x02, 0x02, 0x22, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x0C, 0x10, 0x20, 0x20, 0x3C, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x3E, 0x22, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x1E, 0x02, 0x02, 0x04, 0x18, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x22, 0x02, 0x02, 0x04, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00,
0x00, 0x00, 0x1E, 0x21, 0x4D, 0x55, 0x55, 0x55, 0x4E, 0x20, 0x1C, 0x00, 0x00,

0x00, 0x00, 0x18, 0x08, 0x08, 0x14, 0x14, 0x22, 0x3E, 0x22, 0x77, 0x00, 0x00,
0x00, 0x00, 0x7E, 0x21, 0x21, 0x21, 0x3E, 0x21, 0x21, 0x21, 0x7E, 0x00, 0x00,
0x00, 0x00, 0x1E, 0x21, 0x40, 0x40, 0x40, 0x40, 0x40, 0x21, 0x1E, 0x00, 0x00,
0x00, 0x00, 0x7C, 0x22, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x7C, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x21, 0x20, 0x24, 0x3C, 0x24, 0x20, 0x21, 0x7F, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x21, 0x20, 0x24, 0x3C, 0x24, 0x20, 0x20, 0x78, 0x00, 0x00,
0x00, 0x00, 0x1E, 0x21, 0x40, 0x40, 0x40, 0x47, 0x41, 0x21, 0x1E, 0x00, 0x00,
0x00, 0x00, 0x77, 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x77, 0x00, 0x00,
0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x1E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x44, 0x38, 0x00, 0x00,
0x00, 0x00, 0x73, 0x22, 0x24, 0x24, 0x28, 0x38, 0x24, 0x22, 0x73, 0x00, 0x00,
0x00, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x7F, 0x00, 0x00,
0x00, 0x00, 0x63, 0x22, 0x36, 0x36, 0x2A, 0x2A, 0x22, 0x22, 0x77, 0x00, 0x00,
0x00, 0x00, 0x67, 0x22, 0x32, 0x32, 0x2A, 0x26, 0x26, 0x22, 0x72, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x7E, 0x21, 0x21, 0x21, 0x3E, 0x20, 0x20, 0x20, 0x7E, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x22, 0x1C, 0x1B, 0x00,
0x00, 0x00, 0x7E, 0x21, 0x21, 0x21, 0x3E, 0x24, 0x24, 0x25, 0x73, 0x00, 0x00,
0x00, 0x00, 0x3E, 0x41, 0x40, 0x40, 0x3E, 0x01, 0x01, 0x61, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x49, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x77, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x77, 0x22, 0x22, 0x22, 0x14, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00,
0x00, 0x00, 0x77, 0x22, 0x22, 0x22, 0x2A, 0x2A, 0x2A, 0x14, 0x14, 0x00, 0x00,
0x00, 0x00, 0x77, 0x22, 0x14, 0x14, 0x08, 0x14, 0x14, 0x22, 0x77, 0x00, 0x00,
0x00, 0x00, 0x77, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x08, 0x1C, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x42, 0x04, 0x04, 0x08, 0x10, 0x10, 0x21, 0x7F, 0x00, 0x00,

0x00, 0x00, 0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1C,
0x00, 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,

0x00, 0x00, 0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C,

0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x02, 0x3E, 0x42, 0x42, 0x3D, 0x00, 0x00,
0x00, 0x00, 0x60, 0x20, 0x20, 0x3E, 0x21, 0x21, 0x21, 0x21, 0x7E, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x41, 0x40, 0x40, 0x41, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x06, 0x02, 0x02, 0x3E, 0x42, 0x42, 0x42, 0x42, 0x3F, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x41, 0x7F, 0x40, 0x41, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x0C, 0x10, 0x10, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x3C, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x42, 0x42, 0x42, 0x3E, 0x02, 0x02, 0x3C,
0x00, 0x00, 0x60, 0x20, 0x20, 0x2C, 0x32, 0x22, 0x22, 0x22, 0x77, 0x00, 0x00,
0x00, 0x00, 0x08, 0x00, 0x00, 0x38, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x04, 0x00, 0x00, 0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x38,
0x00, 0x00, 0x60, 0x20, 0x20, 0x26, 0x24, 0x28, 0x38, 0x26, 0x63, 0x00, 0x00,
0x00, 0x00, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x2A, 0x2A, 0x2A, 0x2A, 0x6B, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x32, 0x22, 0x22, 0x22, 0x77, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x21, 0x21, 0x21, 0x21, 0x3E, 0x20, 0x70,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x3E, 0x02, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x19, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x41, 0x38, 0x06, 0x41, 0x3E, 0x00, 0x00,
0x00, 0x00, 0x00, 0x10, 0x10, 0x3E, 0x10, 0x10, 0x10, 0x12, 0x0E, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x22, 0x22, 0x22, 0x26, 0x1B, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x22, 0x22, 0x14, 0x14, 0x08, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x22, 0x2A, 0x2A, 0x14, 0x14, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x22, 0x1C, 0x1C, 0x22, 0x77, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x30,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x44, 0x08, 0x10, 0x22, 0x7E, 0x00, 0x00,

0x00, 0x00, 0x06, 0x08, 0x08, 0x08, 0x08, 0x30, 0x08, 0x08, 0x08, 0x08, 0x06,
0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
0x00, 0x00, 0x30, 0x08, 0x08, 0x08, 0x08, 0x06, 0x08, 0x08, 0x08, 0x08, 0x30,
0x00, 0x00, 0x00, 0x31, 0x49, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


};
# 8 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c" 2
# 16 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c"
u8 *vbe_lfb;

u1 *obj_memory;
u8 *memory_req_mem;

u8 initDone;

struct color{
    u1 rgb[2];
} __attribute__((packed));

typedef struct color t_color;

t_color *video_buffer;
t_color *video_bg_buffer;
t_color *video_tmp_buffer;

void put_pixel(u8 x, u8 y, t_color col){



    u8 lfb_index = x+y*800;
    video_buffer[lfb_index] = col;
}

t_color get_pixel(u8 x, u8 y){
    u8 lfb_index;
    lfb_index = x+y*800;
    t_color ret;
    ret = video_buffer[lfb_index];
    return ret;
}

void put_line(int x1,int y1,int x2,int y2,t_color nState)
{
    unsigned int nTmp;
    unsigned int nAlt=0;
    int x,y;
    int dx;
    int dy;
    int StepVal=0;
    if (x1>x2 && y1>y2)
    {
        nTmp=x2;
        x2=x1;
        x1=nTmp;

        nTmp=y2;
        y2=y1;
        y1=nTmp;

        dx=x2-x1;
        dy=y2-y1;
    }else
    {
        dx=x2-x1;
        dy=y2-y1;

        if (dy<0)
        {
            dy=-dy;

            nTmp=y2;
            y2=y1;
            y1=nTmp;

            nAlt=1;
        }else
            if (dx<0)
            {
                dx=-dx;

                nTmp=x2;
                x2=x1;
                x1=nTmp;

                nAlt=1;
            }
    }

    if (nAlt)
    {

        if(dx>=dy)
        {
            y=y2;
            for(x=x1; x<=x2; x++)
            {

                put_pixel(x,y,nState);
                StepVal+=dy;
                if(StepVal>=dx)

                {
                    y--;
                    StepVal-=dx;

                }
            }
        }
        else

        {
            x=x2;
            for(y=y1; y<=y2; y++)
            {

                put_pixel(x,y,nState);
                StepVal+=dx;
                if(StepVal>=dy)
                {
                    x--;
                    StepVal-=dy;
                }
            }
        }
        return;
    }

    if(dx>=dy)
    {
        y=y1;
        for(x=x1; x<=x2; x++)
        {

            put_pixel(x,y,nState);
            StepVal+=dy;
            if(StepVal>=dx)

            {
                y++;
                StepVal-=dx;

            }
        }
    }
    else

    {
        x=x1;
        for(y=y1; y<=y2; y++)
        {

            put_pixel(x,y,nState);
            StepVal+=dx;
            if(StepVal>=dy)
            {
                x++;
                StepVal-=dy;
            }
        }
    }
    return;
}
# 180 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c"
void put_char(u8 x, u8 y, u1 s){
    t_color textcolor;
    textcolor.rgb[0] = (u1*)(((0xff & 0xf8) << 0x08) | ((0xff & 0xfc) << 5) | (0x00 >> 3));;

    u1 bit;
    u1 bitmask;

    u8 pos=s*13;
    u8 xx, yy=y*13;

    u8 i;
    u8 j;

    for (j=0;j<13;j++){
        bitmask=font[pos+j];
        xx=x*8;
        bit=0x80;
        for (i=0;i<8;i++){
            if ((bitmask&bit)==bit){
                put_pixel(xx,yy,textcolor);
            }
            xx++;
            bit=bit/2;
        }
        yy++;
    }
}

u8 curx=1,cury=1;


void put_string(u1 *str){
    u8 i=0;
    while (str[i] != 0){
        if (str[i] == '\n'){
            cury++;
            i++;
            continue;
        }
        if (str[i] == '\r'){
            curx = 0;
            i++;
            continue;
        }
        put_char(curx,cury,str[i]);
        i++;
        curx++;
        if (cury>=80){
            curx = 0;
            cury++;
        }
    }
}

u1 *memory;
u8 *memory_req_mem;;

void put_number(const u8 n, char type){
    int i=254;
    char *hh = "0123456789ABCDEF";
    u8 nn=n;

    memory_req_mem[0] = 256;;

    u1 *kbuf = syscall(memory, "malloc $req_mem");;
    kbuf[i+1]=0;

    if(type=='d'){
        if(nn==0){
            kbuf[i]='0';
            i--;
        }
        while(nn>0){
            kbuf[i] = nn % 10 + '0';
            nn = nn / 10;
            i--;
        }
    }else if(type=='h'){
        if(nn==0){
            kbuf[i]='0';
            i--;
        }
        while(nn>0){
            kbuf[i] = hh[nn % 16];
            nn = nn / 16;
            i--;
        }




    }else{
        put_string("unknown type\n\r");
    }
    put_string(&kbuf[i+1]);

    memory_req_mem[0] = kbuf;;

    syscall(memory, "free $req_mem");;
}

void put_box(u8 x0, u8 y0, u8 x1, u8 y1, t_color col){
    put_line(x0,y0, x1,y0, col);
    put_line(x1,y0, x1,y1, col);
    put_line(x0,y0, x0,y1, col);
    put_line(x0,y1, x1,y1, col);
}

void put_pixel_callback(GUID guid, u8 *params){
    t_color r;


    r.rgb[0] = (u1*)(((0xff & 0xf8) << 0x08) | ((0xff & 0xfc) << 5) | (0x00 >> 3));;
    put_box(200,200,400,400,r);
}

void make_blur(){
    u8 i;
    u8 *vb = (u8)video_buffer;
    u1 *m = "\1\1\1\1\1\1\1\1";
    asm("movq %0, %%mm0"::"m"(m[0]));
    u8 mm = 800*600*2/4;
    for (i=0; i<mm; i++){
        asm("movq   %0, %%mm1\n"
            "psubusb    %%mm0, %%mm1\n"
            "movq   %%mm1, %0"::"m"(vb[i]));
    }
}

void show_video_buffer(){
    u8 i;


    u8 sizeofbuffer = 800*600*2;

    u8 *vb_bg = (u8)video_bg_buffer;
    u8 *vb = (u8)video_buffer;
    u8 *vb_tmp = (u8)video_tmp_buffer;
    for (i=sizeofbuffer/4; i>0; i--){
        asm("movd   %1, %%mm0\n"
            "movd   %2, %%mm1\n"

            "paddusb  %%mm1, %%mm0\n"
            "movd   %%mm0, %0"
            :"=m"(vb_tmp[i]):"m"(vb[i]),"m"(vb_bg[i]));
    }
# 335 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c"
    for(i=sizeofbuffer/4; i>0; i--){
        asm("movd   %1, %%mm0\n"
            "movd   %%mm0, %0"
            :"=m"(vbe_lfb[i]):"m"(vb_tmp[i]));
    }
}
# 431 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c"
struct rect{
    u8 left, top, right, bottom;
};

typedef struct rect t_rect;

void copy_rect(t_rect dst_rect, u1 *dst, t_rect src_rect, u1 *src){
    u8 x,y, ci=0;
    for(y = 0; y <= src_rect.bottom - src_rect.top; y++){
        memcpy(dst[dst_rect.left*2 +(dst_rect.top+y)*(dst_rect.right - dst_rect.left)*2],
            src[src_rect.left*2 +(src_rect.top+y)*800*2],
            (src_rect.right - src_rect.left)*2 );
    }
}

void video_print_callback(GUID guid, u8 *params){
    while(initDone != 1){

    }

    put_string(params[2]);

    show_video_buffer();
}

void initialize_object(){
    initDone = 0;

    u1 *log = syscall(0, "find_object " "log" "");;

    syscall(log, "print \"OBJECT VIDEO EXECUTE\"");;

    u8 i;





    syscall(log, "print \"OBJECT VIDEO: making video object\"");;


    u1 *video = syscall(0, "create " "video" " ""{C8283DA0-87A6-69CF-AF16-48616423}""");;


    u8 *video_tmp = syscall(video, "new_property " "tmp" " 8");;



    video_tmp[0] = &put_pixel_callback;;
    syscall(video, "new_method putpixel $tmp");

    video_tmp[0] = &video_print_callback;;
    syscall(video, "new_method print $tmp");

    memset(video+2000, 255, 5000);


    syscall(log, "print \"OBJECT VIDEO: added methods: test, putpixel, print\"");;


    memory = syscall(0, "find_object " "memory" "");;







    memory_req_mem = syscall(memory, "new_property " "req_mem" " 8");;







    syscall(log, "print \"OBJECT VIDEO: require video memory 1024x768\"");;

    memory_req_mem[0] = 1024*768*3*3;;

    vbe_lfb = syscall(memory, "get_video_mem $req_mem");;


    syscall(log, "print \"OBJECT VIDEO: require memory for buffers...\"");;

    memory_req_mem[0] = 800*600*2 +100;;

    syscall(log, "print \"OBJECT VIDEO: video_buffer\"");;

    video_buffer = syscall(memory, "malloc $req_mem");;

    syscall(log, "print \"OBJECT VIDEO: video_bg_buffer\"");;

    video_bg_buffer = syscall(memory, "malloc $req_mem");;

    syscall(log, "print \"OBJECT VIDEO: video_tmp_buffer\"");;

    video_tmp_buffer = syscall(memory, "malloc $req_mem");;
    u8* s = 0x10000;
    s[0] = video_buffer;


    syscall(log, "print \"OBJECT VIDEO: printing hello message\"");;

    put_string("PIXITALIPHINA Operation system (c) 2009-2016\n\r");
    t_color col = {0x00,0x00,0xff};

    syscall(log, "print \"OBJECT VIDEO: draw some elements\"");;

    put_line(0,14,800,14,col);


    syscall(log, "print \"OBJECT VIDEO: print test number 12345678\"");;

    put_number(1234567890, 'd');

    syscall(log, "print \"OBJECT VIDEO: show buffer\"");;

    show_video_buffer();

    syscall(log, "print \"OBJECT VIDEO: print test number 12345678\"");;

    put_number(1234567890, 'd');
    put_string("\n\r");







    syscall(log, "print \"OBJECT VIDEO: now read background image..\"");;

    u1 *fs = syscall(0, "find_object " "fs" "");;
    syscall(fs, "fopen /BG");;
    u8 sizeoffile = syscall(fs, "fsize");;
    u1 *fbuf;

    memory_req_mem[0] = sizeoffile+100;;
    fbuf = syscall(memory, "malloc $req_mem");;


    u8 *fs_data = syscall(fs, "new_property " "data" " 8");;
    fs_data[0] = fbuf;
    asm("xchg %bx, %bx");
    syscall(fs, "fread $data");;
    memset(video_bg_buffer,0,800*600*2);
    u8 x,y,j=0x3d5;
# 590 "D:\\WORK\\BUILD\\OS\\dcooos\\video\\video.c"
    show_video_buffer();

    initDone = 1;

    u8 d = syscall(log, "print \"TEST!!!\"");;




    u8 st = 0;
    u8 ii=0;

    t_rect dst = {0,0,100,100};
    t_rect dst1 = {100,100,200,200};

    memory_req_mem[0] = sizeoffile;;
    u1 *mem = syscall(memory, "malloc $req_mem");;

    put_box(0,0,100,100,(t_color){255,55,25});


    u1 *system = syscall(0, "find_object " "system" "");;

    while(1){

    copy_rect(dst1, video_tmp_buffer, dst, mem);
            st++;
            put_string("\rcounter: ");
            put_number(st, 'd');
            show_video_buffer();
            ii=0;


        syscall(system, "sleep 1");
    };
}
